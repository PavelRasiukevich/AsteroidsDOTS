//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/InputSettings/MyControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyControlls"",
    ""maps"": [
        {
            ""name"": ""SpaceShip_AM"",
            ""id"": ""199a8f50-3475-426f-8fd5-477cee88ab9f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""28f02469-7181-4166-baeb-d51812cb3825"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3a65f36b-cd49-4efb-b544-4bebbd815d0c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e3080d4c-9647-4db7-a90e-289ee276173e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eccf4062-dd9c-4ad2-92a2-7bd05b0bf3e7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SpaceShip_AM
        m_SpaceShip_AM = asset.FindActionMap("SpaceShip_AM", throwIfNotFound: true);
        m_SpaceShip_AM_Move = m_SpaceShip_AM.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpaceShip_AM
    private readonly InputActionMap m_SpaceShip_AM;
    private ISpaceShip_AMActions m_SpaceShip_AMActionsCallbackInterface;
    private readonly InputAction m_SpaceShip_AM_Move;
    public struct SpaceShip_AMActions
    {
        private @CustomInput m_Wrapper;
        public SpaceShip_AMActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_SpaceShip_AM_Move;
        public InputActionMap Get() { return m_Wrapper.m_SpaceShip_AM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceShip_AMActions set) { return set.Get(); }
        public void SetCallbacks(ISpaceShip_AMActions instance)
        {
            if (m_Wrapper.m_SpaceShip_AMActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_SpaceShip_AMActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_SpaceShip_AMActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_SpaceShip_AMActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_SpaceShip_AMActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public SpaceShip_AMActions @SpaceShip_AM => new SpaceShip_AMActions(this);
    public interface ISpaceShip_AMActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
